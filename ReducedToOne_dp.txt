#include <iostream>
#include<algorithm>
using namespace std;
int memo[10000];
const int inf=1e9;
//through dp memoratiation or top down approach
int Reduced_One(int n){
    if(n==1) return 0;
   int q1=inf, q2=inf,q3=inf;
   if(memo[n]!=-1){
       return memo[n];
   }
   if(n%3==0) q1=1+Reduced_One(n/3);
   if(n%2==0) q2=1+Reduced_One(n/2);
   q3=1+Reduced_One(n-1);
   memo[n]=min(q1,min(q2,q3));
   return memo[n];
}
//bottom up approch real dp solution
int Reduced_One_dp(int n){
    int dp[10000];
    //base case
    dp[0]=0,dp[1]=0,dp[2]=1,dp[3]=1;
    for(int i=4;i<=n;i++){
        int q1=inf,q2=inf,q3=inf;
        if(i%3==0)q1=1+dp[i/3];
        if(i%2==0)q2=1+dp[i/2];
        q3=1+dp[i-1];
        dp[i]=min(q1,min(q2,q3));
    }
    return dp[n];
}
int main() {
    int t;
    cin>>t;
    while(t--){
  int n;
  cin>>n;
  fill(memo,memo+n+1,-1);
  int ans=Reduced_One_dp(n);
  cout<<ans<<endl;
    }
}
