#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//through recursion
int KnapSack_Rec(int *Val,int *Wt,int n,int W){
    //base case
    if(W==0||n==0) return 0;
    if(Wt[0]>W){
        return KnapSack_Rec(Val+1,Wt+1,n-1,W);
    }
    else{
        return max(Val[0]+KnapSack_Rec(Val+1,Wt+1,n-1,W-Wt[0]),KnapSack_Rec(Val+1,Wt+1,n-1,W));
    }
}
//through bottom up dp
int KnapSack_Dp(int *Val,int *Wt,int W,int n){
    int Dp[n+1][W+1];
    for(int i=0;i<=n;i++){
        for(int w=0;w<=W;w++){
            if(w==0||i==0) Dp[i][w]=0;
            else if(Wt[i-1]>W){
                Dp[i][w]=Dp[i-1][w];
            }
            else{
                Dp[i][w]=max(Val[i-1]+Dp[i-1][w-Wt[i-1]],Dp[i-1][w]);
            }
        }
    }
    return Dp[n][W];
}
int main() {
    int n,s;
    cin>>n>>s;
    int Val[n];
    int Wt[n];
    for(int i=0;i<n;i++){
        cin>>Wt[i];
    }
    for(int i=0;i<n;i++){
        cin>>Val[i];
    }
    cout<<KnapSack_Dp(Val,Wt,s,n)<<endl;
}
