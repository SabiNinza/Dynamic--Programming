#include <iostream>
#include<stdio.h>
#include<bits/stdc++.h>
double dp[105][105][105];
using namespace std;
//set dp with -1
void setdp(){
 for(int i=0;i<105;i++){
     for(int j=0;j<105;j++){
         for(int k=0;k<104;k++){
             dp[i][j][k]=-1.0;
         }
     }
 }
}
//rock survive
double F1(int r,int s,int p){
//base case 
if(p==0) return 1.0;
if(r==0||s==0) return 0.0;

if(dp[r][s][p]!=-1.0) return dp[r][s][p];

double result=0.0;
double total=p*r+p*s+s*r;

result+=F1(r-1,s,p)*((r*p)/total);
result+=F1(r,s-1,p)*((r*s)/total);
result+=F1(r,s,p-1)*((s*p)/total);

return dp[r][s][p]=result;
}
//scissor survive
double F2(int r,int s,int p){
//base case 
if(r==0) return 1.0;
if(p==0||s==0) return 0.0;

if(dp[r][s][p]!=-1.0) return dp[r][s][p];

double result=0.0;
double total=p*r+p*s+s*r;

result+=F1(r-1,s,p)*((r*p)/total);
result+=F1(r,s-1,p)*((r*s)/total);
result+=F1(r,s,p-1)*((s*p)/total);

return dp[r][s][p]=result;
}
// paper survive
double F3(int r,int s,int p){
//base case 
if(s==0) return 1.0;
if(r==0||p==0) return 0.0;

if(dp[r][s][p]!=-1.0) return dp[r][s][p];

double result=0.0;
double total=p*r+p*s+s*r;

result+=F1(r-1,s,p)*((r*p)/total);
result+=F1(r,s-1,p)*((r*s)/total);
result+=F1(r,s,p-1)*((s*p)/total);

return dp[r][s][p]=result;
}

int main() {
    int t;
    cin>>t;
    while(t--){
        int r,s,p;
        cin>>r>>s>>p;
        	setdp();
		double ans1 = F1(r,s,p);
		setdp();
		double ans2 = F2(r,s,p);
		setdp();
		double ans3 = F3(r,s,p);
		cout<<fixed<<setprecision(9)<<ans1<<" "<<ans2<<" "<<ans3<<endl;
    }
    return 0;
}
