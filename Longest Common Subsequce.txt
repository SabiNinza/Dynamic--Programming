#include <iostream>
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
//throught recursion 
int LCS_Rec(char *A, char *B,int x,int y){
    //base case
    if(x==0||y==0) return 0;
    if(A[x-1]==B[y-1]) return LCS_Rec(A,B,x-1,y-1)+1;
    else return max(LCS_Rec(A,B,x-1,y),LCS_Rec(A,B,x,y-1));
    
}
//througt dp 
int LCS_DP(char *A,char *B,int x,int y){
    int dp[x+1][y+1];
    for(int i=0;i<=x;i++){
       for(int j=0;j<=y;j++){
           //empty string
           if(i==0||j==0) dp[i][j]=0;
           //if last char is match
          else if(A[i-1]==B[j-1]) dp[i][j]=1+dp[i-1][j-1];
           else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
       }
    }
   return dp[x][y];
}
using namespace std;
int main() {
    int x,y;
    cin>>x>>y;
     char A[x];
    char B[y];
    for(int i=0;i<x;i++) cin>>A[i];
    for(int i=0;i<y;i++) cin>>B[i];
    cout<<LCS_DP(A,B,x,y)<<endl;
}
